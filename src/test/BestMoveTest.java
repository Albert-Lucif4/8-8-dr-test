package test;

import engine.Constants;
import lib.Util;
import movegen.Magic;
import org.junit.BeforeClass;
import org.junit.Test;
import search.Search;
import search.TimeUtil;

public class BestMoveTest {
    static int time = 1000; //ms

    @BeforeClass
    public static void init() {
        Magic.init();
    }

    private void sendMessage(String message) {
        System.out.println(message + " " + " MAX DEPTH: " + Constants.maxWindowDepth + ". MAX PLY: " + Constants.maxDepth + ". TIME: " + TimeUtil.getTime() + ". RESEARCH: " + Constants.AWPResearchCount);
    }

    private void sendAlert(String message) {
        System.err.println(message + " " + " MAX DEPTH: " + Constants.maxWindowDepth + ". MAX PLY: " + Constants.maxDepth + ". TIME: " + TimeUtil.getTime() + ". RESEARCH: " + Constants.AWPResearchCount);
    }

    private void doTest(String fen) {
        TestFEN testFEN = new TestFEN(fen);

        TimeUtil.setThinkingTime(time);
        Search.search(testFEN.fen, Constants.MAX_PLIES);

        if (!Util.bestMoveStr.equals(testFEN.bestMove)) {
            sendAlert(testFEN.id + " WRONG! _ WITH RESULT: " + Util.bestMoveStr + "_  _ RESULT MUST BE: " + testFEN.bestMove + "_.");
        } else {
            if (testFEN.id.substring(0, 4).equals("MATE")) {
                if (Util.bestScore > Util.SCORE_MATE_BOUND) {
                    sendMessage(testFEN.id + " DONE.");
                } else {
                    sendAlert(testFEN.id + " DONE. BUT NOT A MATE STATE.");
                }
            } else {
                sendMessage(testFEN.id + " DONE.");
            }
        }
//        Assert.assertEquals(Util.bestMoveStr, testFEN.bestMove);
    }

    private void serialTest(String[] fenTest){
        int sumDepth = 0;
        int sumPly = 0;
        for (String i : fenTest) {
            doTest(i);
            sumDepth += Constants.maxWindowDepth;
            sumPly += Constants.maxDepth;
        }

        System.out.println("Depth average: " + (sumDepth / fenTest.length));
        System.out.println("Ply average: " + (sumPly / fenTest.length));
    }

    @Test
    public void mateTest() {
        System.out.println("**************************************************************\n" +
                "*                      WINNING GAMES TEST                    *\n" +
                "**************************************************************");
        String[] fenTest = {
                "W:W11,16:B12,32 11-17 MATE.01",
                "W:W2,8:BK30,35 8-13 MATE.02",
                "W:W27,26,19,18,9,7,4:B43,42,35,34,15,12 4-10 MATE.03",
                "W:W24,23,19,14,13,9,8:B40,38,37,33,32,28,27 24-29 MATE.04",
                "W:W27,22,19,14,13,12,9,7:B39,38,37,36,34,33,29,15 14-20 MATE.05",
                "W:W24,18,13,12,7,6,1:B44,43,42,33,31,21,16 24-29 MATE.06",
                "W:W24,23,19,18,17,13,11,4,2:B44,43,42,38,35,33,32,28,27 24-29 MATE.07",
                "W:W24,23,19,18,17,14,13,3,2:B39,38,35,34,32,30,28,27,25 17-22 MATE.08",
                "W:W44,40,39,32,28,27,25,22,16,11,7,6,4,2:B49,42,41,33,29,24,23,19,18,14,13,12,9 16-21 MATE.09",
                "W:W24,23,19,13,9,4,2:B43,39,35,33,32,28,22 24-29 MATE.10",
                "W:W29,25,24,21,2:B43,42,35,31,13 2-8 MATE.11"

        };
        serialTest(fenTest);

    }

    @Test
    public void captureTest() {
        System.out.println("**************************************************************\n" +
                "*                      WINNING PIECES TEST                   *\n" +
                "**************************************************************");
        String[] fenTest = {
                "W:W2,3,4,5,10,11,12,14,15,19,20,24:B22,34,35,37,38,39,40,45,47,48,49,50 24-29 CAP.01",
                "W:W1,2,3,4,5,6,9,14,15,19,24,26:B17,32,34,35,38,39,40,41,44,45,48,49 24-29 CAP.02",
                "W:W28,23,19,18,13,12,7,4,3:B49,48,45,39,37,34,25,21,16 28-33 CAP.03",
                "W:W27,23,22,21,18,12,11,7,6,4,3,2:B49,48,47,41,39,38,37,36,35,32,30,24 23-28 CAP.04",
                "W:W24,19,18,16,15,14,13,12,9,8,6,5,4,3,2:B49,48,47,45,44,43,42,41,40,39,38,35,34,32,26 24-29 CAP.05",
                "W:W33,21,19,17,14,10,4,3,2:B49,47,40,37,35,31,30,25,18 19-24 CAP.06",
                "W:W24,17,14,11,6:B40,39,33,28,26 24-29 CAP.07",
                "W:W24,20,19,16,14,13,12,11,10,9,8,7,6,5,4,3,2,1:B50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,22 24-29 CAP.08",
                "W:W25,24,19,17,16,15,14,13,12,11,9,6,5,4,3,2:B50,49,48,47,46,45,42,41,40,39,38,35,34,32,31,27 24-29 CAP.09",
                "W:W24,23,22,20,18,12,10,6,5,4,3,2:B49,48,47,45,40,39,37,36,35,34,33,29 22-28 CAP.10",
                "W:W19,18,16,15,14,13,12,9,8,6,5,4,3,2:B49,48,47,46,44,43,41,35,34,32,31,28,27,25 14-20 CAP.11",
                "W:W35,20,18,17,15,14,10,7,6,4,3:B49,48,47,44,43,39,36,33,30,29,24 18-23 CAP.12",
                "W:W24,20,18,16,13,12,8,7,6,4,3,1:B49,48,47,45,42,40,37,35,32,31,27,21 18-22 CAP.13",
                "W:W25,17,16,14,13,12,11,7,6,4,3,2,1:B49,48,47,46,45,41,40,39,36,34,32,31,24 13-19 CAP.14",
                "W:W23,20,19,18,17,16,14,13,12,11,7,6,5,4,3,2,1:B49,48,47,46,45,42,41,39,38,37,34,33,32,31,30,29,26 23-28 CAP.15",
                "W:W26,24,19,18,17,14,13,12,11,10,9,7,6,5,4,3,2,1:B50,49,48,47,45,44,43,42,41,40,39,37,36,35,33,31,29,28 18-23 CAP.16",
                "W:W24,23,22,20,18,15,14,11,10,4,3:B49,48,47,45,40,39,35,34,33,32,29 22-28 CAP.17",
                "W:W26,24,20,19,17,15,14,4,3,2:B48,45,41,40,39,38,37,35,34,27 17-22 CAP.18",
                "W:W25,24,21,20,19,17,15,14,6,3,2:B49,48,47,45,40,35,34,33,32,31,26 24-30 CAP.19",
                "W:W19,17,16,12,7,4,3,2:B49,48,47,45,32,28,27,20 19-23 CAP.20",
                "W:W38,32,17,11,4,3,2:B48,34,30,26,24,21,14 4-9 CAP.21",
                "W:W25,24,23,19,16,13,12,11,7,6,4:B43,40,39,38,37,34,33,32,28,27 24-29 CAP.22",
                "W:W26,23,21,19,14,12,9,2:B45,40,39,38,37,32,28,22 12-17 CAP.23",
                "W:W20,18,17,15,12,11,7,6,4,3,2:B49,48,47,45,37,36,35,32,31,25,10 4-9 CAP.23.01",
                "W:W19,18,16,15,14,13,12,11,8,6,4,3:B49,48,44,43,42,41,39,33,32,29,26,25 14-20 CAP.24",
                "W:W23,19,14,13,11,8,7,6,4:B39,38,37,35,32,30,28,27,25 14-20 CAP.25",
                "W:W27,19,18,17,15,13,11,9,8,6,5,3,2:B49,48,46,45,43,42,40,39,37,36,35,26,25 27-32 CAP.26",
                "W:W34,19,18,15,13,7,5,3,2,1:B49,48,47,46,45,40,38,37,35,27 3-9 CAP.27",
                "W:W26,24,21,20,19,14,13,12,11,10,8,6,4,3,2:B49,48,47,46,45,41,40,39,38,37,35,34,33,28,25 24-29 CAP.28",
                "W:W24,23,19,17,16,13,9,3:B48,43,37,35,32,30,27,26 17-21 CAP.29",
                "W:W29,23,20,19,18,17,14,4,3,2:B48,40,39,38,35,34,32,28,27,26 18-22 CAP.30",
                "W:W23,19,18,16,14,13,12,11,9,1:B42,40,39,38,37,36,34,32,28,27 16-21 CAP.31",
                "W:W23,22,18,17,13,11,4,3:B49,47,44,43,42,34,31,27 23-29 CAP.32",
                "W:W29,23,19,18,17,14,11,6:B42,40,38,36,34,32,28,27 17-22 CAP.33",
                "W:W27,23,19,18,17,14,12:B49,44,43,42,38,34,32 17-22 CAP.34",
                "W:W26,25,19,16,12,11,9,6,4,3:B39,38,37,36,35,33,31,29,28,27 16-21 CAP.35"

        };

        serialTest(fenTest);

    }

    @Test
    public void hardTest() {
        System.out.println("**************************************************************\n" +
                "*                      BRAIN HACKING TEST                    *\n" +
                "**************************************************************");
        //deep mind testing
        String[] fenTest = {
                "W:W29,23,21,20,19,18,17,16,13,11,9,8,7,6,3,2:B48,45,44,43,42,41,39,38,37,35,32,31,30,28,27,26 18-22 HARD.01",
                "W:W28,27,25,24,17,15,12,11,5,4,3:B45,43,41,40,39,38,37,36,34,13 25-30 HARD.02",
                "W:W28,27,19,17,9:B43,41,39,37,23 28-32 HARD.03",
                "W:W28,27,24,23,22,18,17,14,4,3:B42,41,39,38,36,35,34,31,25,15 24-30 HARD.04",
                "W:W29,26,25,23,21,19,18,16,13,11,6,4:B42,40,39,38,37,36,35,34,32,28,27,22 29-33 HARD.05",
                "W:W45,26,24,23,18,17,16,13,11,6:B42,41,38,37,36,32,28,27,25,10 24-30 HARD.06",
                "W:W26,25,23,20,19,16,15,13,10,8:B48,45,43,40,37,35,34,32,28,22 23-29 HARD.07.NAPOLEON",
                "W:W25,24,21,20,19,16,15,13,11,10,9,8,7,6,4,3,2,1:B49,48,47,46,45,44,42,41,40,39,38,36,35,34,33,31,28,23 24-29 HARD.08"
        };
        serialTest(fenTest);
    }

    @Test
    public void bestMove(){
        System.out.println("**************************************************************\n" +
                           "*                      BEST MOVE TEST                        *\n" +
                "**************************************************************");
        String[] fenTest = {
                "W:W26,24,23,21,19,18,17,16,15,14,13,9,8,3:B48,47,45,43,42,38,37,35,33,32,30,28,27,25 24-29 GOOD.01"
        };
        serialTest(fenTest);
    }
}
